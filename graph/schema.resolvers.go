package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"assingment/graph/model"
	"context"
	"fmt"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	return r.Store.Service.CreateUser(ctx, input)

	// panic(fmt.Errorf("not implemented: CreateUser - CreateUser"))
}

// CreateCompany is the resolver for the CreateCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input model.NewCompany) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: CreateCompany - CreateCompany"))
}

// FetchAllUser is the resolver for the fetchAllUser field.
func (r *queryResolver) FetchAllUser(ctx context.Context) ([]*model.User, error) {
	return r.Store.Service.ViewUser(ctx)
	// panic(fmt.Errorf("not implemented: FetchAllUser - fetchAllUser"))
}

// FetchCompanies is the resolver for the fetchCompanies field.
func (r *queryResolver) FetchCompanies(ctx context.Context) ([]*model.Company, error) {
	panic(fmt.Errorf("not implemented: FetchCompanies - fetchCompanies"))
}

// FetchCompaniesByID is the resolver for the fetchCompaniesById field.
func (r *queryResolver) FetchCompaniesByID(ctx context.Context, input string) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: FetchCompaniesByID - fetchCompaniesById"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
